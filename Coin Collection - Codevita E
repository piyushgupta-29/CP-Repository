#include<bits/stdc++.h>
using namespace std;
 
#define boost ios_base::sync_with_stdio(false);cin.tie(NULL)
#define endl "\n"
#define ll long long int
#define mod 1000000007
#define vll vector<ll>
#define vvll vector<vll>
#define pb push_back
#define mll map<ll,ll>
#define pll pair<ll,ll>
aaaaa
// dsu
ll getparent(ll a,vll &parent)
{
    return parent[a]=(parent[a]==a?a:getparent(parent[a],parent));
}
void getunion(ll a,ll b,vll &parent,vll &size)
{
    a=getparent(a,parent);
    b=getparent(b,parent);
    if(size[b]>size[a])
    {
        parent[a]=b;
        size[b]+=size[a];
        size[a]=0;
    }
    else
    {
        parent[b]=a;
        size[a]+=size[b];
        size[b]=0;
    }
}
int main()
{
    boost;
    ll t,n,i,x,y,m,p,q,sum,ans,cnt,mx,mn,j,k;
    sum=0;cnt=0;ans=0;mx=INT_MIN;mn=1e18;
    cin>>n;
    vvll a(n+2,vll(n+2,0));
    for(i=1;i<=n;i++)
    {
        string s;
        cin>>s;
        for(j=1;j<=n;j++)
        {
            if(s[j-1]=='C')  
            {
                sum++;
                a[i][j]=sum;
            }
        }
    }
    vll size(sum+1,1),parent(sum+1);
    for(i=1;i<=sum;i++)
        parent[i]=i;
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            if(a[i][j])
            {
                if(a[i-1][j])
                    getunion(a[i-1][j],a[i][j],parent,size);
                if(a[i][j-1])
                {
                    if(getparent(a[i][j],parent)!=getparent(a[i][j-1],parent))
                        getunion(a[i][j-1],a[i][j],parent,size);
                }
            }
        }
    }
    sort(size.begin()+1,size.end());
    reverse(size.begin()+1,size.end());
    set<ll> st;
    for(i=1;i<=sum;i++)
    {   
        st.insert(parent[i]);
    }
    x=st.size();
    for(i=1;i<=x;i+=2)
        cnt+=size[i];
    for(i=2;i<=x;i+=2)  
        ans+=size[i];
    cout<<cnt<<' '<<ans;
}
