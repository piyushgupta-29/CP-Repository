#include<bits/stdc++.h>
using namespace std;

const int MOD = 1000000007;

void maximalANDSubsequencesHelper(vector<int> &arr, int k, int index, int current, int &maxVal, int &count)
{
	if (k == 0)
	{
		// Generated a valid k-element subsequence.
		if (current > maxVal)
		{
			// Found a larger AND value. So, update the maximum value.
			maxVal = current;

			// Reset the counter to 1.
			count = 1;
		}
		else if (current == maxVal)
		{
			// Same maximum value is encountered. So, increment the counter.
			count = ((long long)count + 1) % MOD;
		}
		return;
	}

	if (index == arr.size())
	{
		// No more elements in the array, so return.
		return;
	}

	// Generate the remaining subsequence.
	// Ignore the current element.
	maximalANDSubsequencesHelper(arr, k, index + 1, current, maxVal, count);

	// Include the current element in the subsequence.
	maximalANDSubsequencesHelper(arr, k - 1, index + 1, current & arr[index], maxVal, count);
}

vector<int> maximalANDSubsequences(vector<int> &arr, int k)
{
	int maxVal = -1;
	int count = 0;

	// Call the rescursive function for every index in the array.
	for (int i = 0; i < arr.size(); i++)
	{
		int current = arr[i];
		maximalANDSubsequencesHelper(arr, k - 1, i + 1, current, maxVal, count);
	}

	vector<int> ans = {maxVal, count};

	return ans;
}
vector<long long> solve (int n, int m, vector<int> a, vector<vector<int> > q) {
   // Write your code here
   vector<long long> ans;
   int i,j,k;
   for(i=0;i<m;i++)
   {
      vector<int> v;
      long long sum=0;
      k=0;
      for(j=0;j<q[i][0];j++)
      {
         sum+=a[j];
      }
      v.push_back(sum);
      for(j;j<n;j++)
      {
         sum-=a[k];
         sum+=a[j];
         v.push_back(sum);
         k++;
      }
      for(j=30;j>=0;j--)
      {
         sum=0;
         if(q[i][2]&(1<<j))
            continue;
         vector<int> temp;
         for(k=0;k<v.size();k++)
         {
            if(v[k]&(1<<j))
            {
               sum++;
               temp.push_back(v[k]);
            }
         }
         if(sum>=q[i][1])
         {
            v=temp;
         }
      }
      sum=v[0];
      for(j=1;j<v.size();j++)
      {
         sum=(sum&v[j]);
      }
      ans.push_back((sum|q[i][2]));
   }
   return ans;
}

int main() {

    ios::sync_with_stdio(0);
    cin.tie(0);
    int N;
    cin >> N;
    int M;
    cin >> M;
    vector<int> A(N);
    for(int i_A = 0; i_A < N; i_A++)
    {
    	cin >> A[i_A];
    }
    vector<vector<int> > Q(M, vector<int>(3));
    for (int i_Q = 0; i_Q < M; i_Q++)
    {
    	for(int j_Q = 0; j_Q < 3; j_Q++)
    	{
    		cin >> Q[i_Q][j_Q];
    	}
    }

    vector<long long> out_;
    out_ = solve(N, M, A, Q);
    cout << out_[0];
    for(int i_out_ = 1; i_out_ < out_.size(); i_out_++)
    {
    	cout << " " << out_[i_out_];
    }
}
